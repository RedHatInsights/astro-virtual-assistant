from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import ActionExecuted

from common import logging
from common.requests import send_console_request

VULNERABILITY_LIMIT = 5

logger = logging.initialize_logging()


class VulnerabilityAPICVE(Action):
    def name(self) -> Text:
        return "action_vulnerability_api_cves"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:
        result = send_console_request(
            "vulnerability",
            "/api/vulnerability/v1/vulnerabilities/cves?limit={}&sort=-cvss_score&affecting=true&advisory_available=true".format(
                VULNERABILITY_LIMIT
            ),
            tracker,
        )
        status = None
        try:
            status = result.status_code
        except Exception as e:
            dispatcher.utter_message(
                response="utter_vulnerability_my_cves_error",
                dashboard="/insights/vulnerability/cves",
            )
            logger.error(
                "Failed to get a response from the vulnerability API: status {}; result {}".format(
                    status, result
                ),
                exc_info=True,
            )
            return []

        result = result.json()
        if not result or status != 200:
            dispatcher.utter_message(
                response="utter_vulnerability_my_cves_error",
                dashboard="/insights/vulnerability/cves",
            )
            logger.error(
                "Failed to get a response from the vulnerability API: status {}; result {}".format(
                    status, result
                )
            )
            return []

        length = None
        try:
            length = len(result["data"])
        except KeyError:
            logger.error(
                "Failed to parse the response from the vulnerability API - KeyError: {}".format(
                    result
                )
            )
            dispatcher.utter_message(
                response="utter_vulnerability_my_cves_error",
                dashboard="/insights/vulnerability/cves",
            )
            return []
        except Exception as e:
            logger.error(
                "Failed to parse the response from the vulnerability API: error {}; status {}; result {}".format(
                    e, status, result
                )
            )
            dispatcher.utter_message(
                response="utter_vulnerability_my_cves_error",
                dashboard="/insights/vulnerability/cves",
            )
            return []

        dispatcher.utter_message(
            response="utter_vulnerability_my_cves_listing", length=length
        )

        index = 1
        for cve in result["data"]:
            dispatcher.utter_message(
                response="utter_vulnerability_my_cves_item",
                index=index,
                id=cve["id"],
                impact=cve["attributes"]["impact"],
                systems_affected=cve["attributes"]["systems_affected"],
                link="/insights/vulnerability/cves/{}".format(cve["id"]),
            )

            index += 1

        dispatcher.utter_message(
            response="utter_vulnerability_my_cves_closing",
            dashboard="/insights/vulnerability/cves",
        )

        events = [ActionExecuted(self.name())]
        return events
