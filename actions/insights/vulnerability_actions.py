from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import ActionExecuted

from common import CONSOLEDOT_BASE_URL, send_console_request, logging

VULNERABILITY_LIMIT = 5

logger = logging.initialize_logging()

class VulnerabilityAPICVE(Action):

    def name(self) -> Text:
        return 'action_vulnerability_api_cves'

    async def run(self,
                  dispatcher: CollectingDispatcher,
                  tracker: Tracker,
                  domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        result = send_console_request("vulnerability", "/api/vulnerability/v1/systems?limit={}&sort=-cve_count".format(VULNERABILITY_LIMIT), tracker)
        status = result.status_code
        result = result.json()
        if not result or not result['meta'] or status != 200:
            dispatcher.utter_message(response="utter_vulnerability_my_cves_error", dashboard=CONSOLEDOT_BASE_URL+"/insights/vulnerability/systems")
            logger.error("Failed to get a response from the vulnerability API: status {}; result {}".format(status, result))
            return []

        total = None
        length = None
        try:
            total = result['meta']['total_items']
            length = len(result['data'])
        except KeyError:
            logger.error("Failed to parse the response from the vulnerability API - KeyError: {}".format(result))
            dispatcher.utter_message(response="utter_vulnerability_my_cves_error", dashboard=CONSOLEDOT_BASE_URL+"/insights/vulnerability/systems")
            return []
        except Exception as e:
            logger.error("Failed to parse the response from the vulnerability API: error {}; status {}; result {}".format(e, status, result))
            dispatcher.utter_message(response="utter_vulnerability_my_cves_error", dashboard=CONSOLEDOT_BASE_URL+"/insights/vulnerability/systems")
            return []
        
        dispatcher.utter_message(response="utter_vulnerability_my_cves_total", total=total, length=length)

        index = 1
        for system in result['data']:
            dispatcher.utter_message(response="utter_vulnerability_my_cves_item",
                index=index,
                display_name=system['attributes']['display_name'],
                os=system['attributes']['os'],
                cve_count=system['attributes']['cve_count'],
                link=CONSOLEDOT_BASE_URL+"/insights/vulnerability/systems/{}".format(system['id'])
            )

            index += 1

        dispatcher.utter_message(response="utter_vulnerability_my_cves_closing", dashboard=CONSOLEDOT_BASE_URL+"/insights/vulnerability/systems")

        events = [ActionExecuted(self.name())]
        return events
