---
apiVersion: v1
kind: Template
metadata:
  name: virtual-assistant
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: virtual-assistant
  spec:
    envName: ${ENV_NAME}
    testing:
      iqePlugin: astro-va
    dependencies:
      - advisor-backend
      - notifications-gw
      - notifications-backend
      - vulnerability-engine
      - content-sources-backend
      - sources-api
      - rhsm-api-proxy
      - ccx-smart-proxy
      - chrome-service
      - rbac

    inMemoryDb: true
    database:
      name: virtual-assistant
      version: 12

    deployments:
    - name: api
      minReplicas: ${{MIN_REPLICAS}}
      webServices:
        public:
          enabled: true
          apiPath: virtual-assistant
        metrics:
          enabled: true
      podSpec:
        image: ${API_IMAGE_NAME}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/virtual-assistant/v1
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 240
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/virtual-assistant/v1
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 240
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        env:
          - name: CLOWDER_ENABLED
            value: ${CLOWDER_ENABLED}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: FAIL_FAST_ON_DEPENDENCIES
            value: ${FAIL_FAST_ON_DEPENDENCIES}
          - name: TRACKER_STORE_TYPE
            value: ${TRACKER_STORE_TYPE}
          - name: LOCK_STORE_TYPE
            value: ${LOCK_STORE_TYPE}
          - name: PROMETHEUS
            value: ${PROMETHEUS}
          - name: ACTIONS_ENDPOINT_URL
            value: ${ACTIONS_ENDPOINT_URL}
          - name: SANIC_REQUEST_MAX_HEADER_SIZE
            value: ${SERVER_REQUEST_MAX_HEADER_SIZE}
          - name: SANIC_WORKERS
            value: ${REST_WORKERS}
        resources:
          limits:
            cpu: 1500m
            memory: 1.6Gi
          requests:
            cpu: 1000m
            memory: 1.2Gi
    - name: actions
      minReplicas: ${{MIN_REPLICAS}}
      webServices:
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${ACTIONS_IMAGE_NAME}:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 10000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 27
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 10000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        env:
          - name: CLOWDER_ENABLED
            value: ${CLOWDER_ENABLED}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: FAIL_FAST_ON_DEPENDENCIES
            value: ${FAIL_FAST_ON_DEPENDENCIES}
          - name: TRACKER_STORE_TYPE
            value: ${TRACKER_STORE_TYPE}
          - name: PROMETHEUS
            value: ${PROMETHEUS}
          - name: CONSOLEDOT_BASE_URL
            value: ${CONSOLEDOT_BASE_URL}
          - name: ENVIRONMENT_NAME
            value: ${ENVIRONMENT_NAME}
        resources:
          limits:
            cpu: 250m
            memory: 120Mi
          requests:
            cpu: 100m
            memory: 80Mi

    - name: internal
      minReplicas: ${{MIN_REPLICAS}}
      webServices:
        private:
          enabled: true
        metrics:
          enabled: true
      podSpec:
        image: ${INTERNAL_IMAGE_NAME}:${IMAGE_TAG}
        command:
          - python
          - run_internal.py
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 27
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        env:
          - name: CLOWDER_ENABLED
            value: ${CLOWDER_ENABLED}
          - name: LOG_LEVEL
            value: ${LOG_LEVEL}
          - name: FAIL_FAST_ON_DEPENDENCIES
            value: ${FAIL_FAST_ON_DEPENDENCIES}
          - name: TRACKER_STORE_TYPE
            value: ${TRACKER_STORE_TYPE}
          - name: PROMETHEUS
            value: ${PROMETHEUS}
          - name: CONSOLEDOT_BASE_URL
            value: ${CONSOLEDOT_BASE_URL}
        resources:
          limits:
            cpu: 250m
            memory: 120Mi
          requests:
            cpu: 100m
            memory: 80Mi
    jobs:
    - name: db-cleaner
      schedule: ${CLEANER_SCHEDULE}
      suspend: ${{CLEANER_SUSPEND}}
      concurrencyPolicy: Forbid
      restartPolicy: Never
      podSpec:
        image: quay.io/cloudservices/postgresql-rds:15
        volumes:
          - name: virtual-assistant-db-cleaner-volume
            configMap:
              name: virtual-assistant-db-cleaner-config
        volumeMounts:
          - name: virtual-assistant-db-cleaner-volume
            mountPath: /virtual-assistant-db-cleaner
        command: [ 'sh', '/virtual-assistant-db-cleaner/clean.sh' ]
        env:
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                name: virtual-assistant-db
                key: ${DB_SECRET_HOSTNAME_KEY}
          - name: PGDATABASE
            value: ${DB_NAME}
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: virtual-assistant-db
                key: ${DB_SECRET_USERNAME_KEY}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: virtual-assistant-db
                key: ${DB_SECRET_PASSWORD_KEY}
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: virtual-assistant-db-cleaner-config
  data:
    clean.sh: |
      cat /virtual-assistant-db-cleaner/clean.sql | psql
    clean.sql: |
      \timing
      DELETE FROM events WHERE timestamp < EXTRACT(EPOCH FROM (NOW() - interval '180 days'));
      VACUUM ANALYZE events;
parameters:
- description: Minimum number of replicas required
  name: MIN_REPLICAS
  value: "1"
- name: LOG_LEVEL
  value: INFO
- name: FAIL_FAST_ON_DEPENDENCIES
  value: "true"
- description: Determines Clowder deployment
  name: CLOWDER_ENABLED
  value: "true"
- description: ClowdEnv Name
  name: ENV_NAME
  value: "virtual-assistant"
  required: true
- descripton: Virtual Assistant API image name
  name: API_IMAGE_NAME
  value: "quay.io/cloudservices/virtual-assistant-api"
- descripton: Virtual Assistant actions server image name
  name: ACTIONS_IMAGE_NAME
  value: "quay.io/cloudservices/virtual-assistant-actions"
- descripton: Virtual Assistant internal API image name
  name: INTERNAL_IMAGE_NAME
  value: "quay.io/cloudservices/virtual-assistant-internal"
- description: The Image tag
  name: IMAGE_TAG
  value: "latest"
- description: Tracker store type
  name: TRACKER_STORE_TYPE
  value: "SQL"
- description: Lock store type
  name: LOCK_STORE_TYPE
  value: "redis"
- description: Enable Prometheus
  name: PROMETHEUS
  value: "True"
- description: Actions endpoint url
  name: ACTIONS_ENDPOINT_URL
  value: http://virtual-assistant-actions:10000/webhook
- description: ConsoleDot base url
  name: CONSOLEDOT_BASE_URL
  value: https://console.redhat.com
- description: Server's max allowed header size
  name: SERVER_REQUEST_MAX_HEADER_SIZE
  value: "20000"
- name: CLEANER_SUSPEND
  value: 'false'
- name: CLEANER_SCHEDULE
  value: "1 0 * * *"
- name: DB_NAME
  description: Database name used by the db-cleaner CronJob
  value: virtual_assistant
- name: DB_SECRET_HOSTNAME_KEY
  description: Key of the hostname field in the virtual-assistant-db secret
  value: db.host
- name: DB_SECRET_PASSWORD_KEY
  description: Key of the password field in the virtual-assistant-dbdb secret
  value: db.password
- name: DB_SECRET_USERNAME_KEY
  description: Key of the username field in the virtual-assistant-db secret
  value: db.user
- name: REST_WORKERS
  description: The number of workers in Sanic's REST API
  value: "1"
- name: ENVIRONMENT_NAME
  description: The name of the environment. Needs to be either stage or prod
  value: "prod"
